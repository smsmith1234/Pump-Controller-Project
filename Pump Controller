#define MY_RADIO_NRF24

#include <SPI.h>
#include <MySensors.h>
#include <DallasTemperature.h>
#include <OneWire.h>

#define COMPARE_TEMP 1

#define CHILD_ID_TEMP 0
#define CHILD_ID_WATER 1
#define CHILD_ID_BINARY 2

#define ONE_WIRE_BUS 3
#define PRESSURE_BUS 5

unsigned long SLEEP_TIME= 30000;
OneWire onewire(ONE_WIRE_BUS);
DallasTemperature sensors(&onewire);
float lasttemperature = 0;
int numSensors=0;
bool receivedConfig=false;

//initialize temperature, water and binary messages
MyMessage msgTemp(CHILD_ID_TEMP, V_TEMP);
MyMessage msgWater(CHILD_ID_PRESSURE, V_FLOW, V_VOLUME);
MyMessage msgBinary(CHILD_ID_BINARY, V_STATUS, V_WATT);

void before()
{
  //startup the OneWire library
  sensors.begin();
}

void setup()
{
  // requestTemperatures() will not block current thread
  sensors.setWaitForConversion(false);
}

void presentation()
{
  // Send sketch version to gateway and controller
  sendSketchInfo("Water Sensor","1.1");

  // Fetch the number of attached Dallas Sensors
  //  numSensors=sensors.getDeviceCount();  

  // Present all sensors to controller
  present(0, S_TEMP); // Temperature
  present(1, S_WATER); // Pump pressure (PSI) and null
  present(2, S_BINARY); // Pump status and error number

}

void loop()
{
// Fetch temperatures from dallas sensors
sensors.requestTemperature();

// Query conversion time and wait until conversion is complete
int16_t conversionTime = sensors.millisToWaitForConversion(sensors.getResolution());
wait(conversionTime);

// Read temperatures and send them to the controller
float temperature = static_cast<float>(static_cast<int>((getConfig().isMetric?sensors.getTempCByIndex(i);sensors.getTempFByIndex(i))*10.00/10.;
    
// Only send if temperature has changed and no error
    #if COMPARE_TEMP == 1
    if (lastTemperature != temperature && temperature != -127.00 && temperature != 85.00){
    #else
    if (temperature != -127.00 && temperature != 85.00){
    #endif
    
    // Send in the new temperature
    send(msgTemp.setSensor(i).set(temperature,1));
    // Save new temperature for next compare
    lastTemperature[i] = temperature;
    }
  }
  wait(SLEEP_TIME);
}
