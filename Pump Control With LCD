// Super Simple
// STATUS: 1 = normal pressure; 2 = low pressure (turn on); 3 = high pressure (turn off); 4 = low pressure alarm; 5 = high pressure alarm  */

#include <Wire.h>
#include <RTClib.h>
#include <SPI.h>
#include <SD.h>
#include <DHT.h>
#include <LiquidCrystal_I2C.h>

#define MY_DEBUG

#define PRESSURE_DATA_PIN 3
#define PUMP_RUN_PIN 9
#define MIN_PRESSURE 10
#define LP_TURN_ON 20

int maxPressure = 0;
int pressure = 0;
int HPCutOff = 0;
int status = 0;
int led = 13;
int GetMaxPressure(int);
int GetPressure(int);

/*********************************************SD Card******************************************************/

File myFile;
const int chipSelect = 4;

/**********************************************RTC*********************************************************/

RTC_DS1307 rtc;
char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

/**********************************************DHT*********************************************************/

LiquidCrystal_I2C lcd(0x3F, 16, 2);
#define DHTPIN 2     // Digital pin connected to the DHT sensor
#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321
DHT dht(DHTPIN, DHTTYPE);

/*********************************************Setup******************************************************/

void setup()
{
  pinMode(PRESSURE_DATA_PIN, INPUT);
  pinMode(PUMP_RUN_PIN, OUTPUT);
  pinMode(led, OUTPUT);

  lcd.begin();
  lcd.backlight();
  lcd.print("Starting up");
  delay(1000);
  lcd.clear();

  Serial.begin(9600);
  if (! rtc.begin()) {
    lcd.print("Couldn't find RTC");
    delay(1000);
    lcd.clear();
    while (1);
  }
  if (! rtc.isrunning()) {
    lcd.print("RTC is NOT running!");
    delay(1000);
    lcd.clear();
  }
  lcd.print("Initializing SD card...");
  delay(1000);
  lcd.clear();
  pinMode(SS, OUTPUT);
  if (!SD.begin(chipSelect)) {
    lcd.print("init failed!");
    delay(1000);
    lcd.clear();
    return;
  }
  lcd.print("SD ready.");
  delay(1000);
  lcd.clear();
  dht.begin();

  maxPressure = GetMaxPressure(PRESSURE_DATA_PIN);
  HPCutOff = static_cast<int>(static_cast<float>(maxPressure) * .9);

  lcd.print("Max: ");
  lcd.println(maxPressure);
  lcd.print("HP CO: ");
  lcd.println(HPCutOff);

}

void loop()
{
  pressure = GetPressure(PRESSURE_DATA_PIN);

  if (pressure > maxPressure) {
    digitalWrite(PUMP_RUN_PIN, HIGH);
    status = 5;  // Overpressure error - turn off pump
  }
  else if (pressure <= MIN_PRESSURE) {
    digitalWrite(PUMP_RUN_PIN, HIGH);
    status = 4;  // Underpressure error - turn off pump
  }
  else if (pressure >= HPCutOff) {
    digitalWrite(PUMP_RUN_PIN, HIGH);
    status = 3;  // Pressure above cut off - turn off pump
  }
  else if (pressure <= LP_TURN_ON) { //
    digitalWrite(PUMP_RUN_PIN, LOW);
    status = 2;  // Pressure below cut on - turn on pump
  }
  else if (pressure > LP_TURN_ON && pressure < HPCutOff) {
    status = 1;  // Pressure good - no change to pump
  }
  else {
    digitalWrite(PUMP_RUN_PIN, HIGH);
    status = 6;  // Undetermined error - turn off pump
  }


  lcd.print("Status: ");
  lcd.println(status);
  lcd.print("Pressure: ");
  lcd.print(pressure);

  digitalWrite(led, HIGH);
  delay(500);
  digitalWrite(led, LOW);
  delay(500);
}

/*--------------------------------------*/
int GetMaxPressure(int inputPin)
{
  digitalWrite(PUMP_RUN_PIN, LOW);
  delay(5000);
  digitalWrite(PUMP_RUN_PIN, HIGH);
  delay(5000);
  return map(analogRead(inputPin), 100, 925, 0, 60);
  //inputValue = analogRead(inputPin);
  //PSI = (inputValue - 102) / 15.367;
  //return static_cast<int>(PSI);
}

int GetPressure(int inputPin)
{
  return map(analogRead(inputPin), 100, 925, 0, 60);
  //inputValue = analogRead(inputPin);
  //PSI = (inputValue - 102) / 15.367;
  //return static_cast<int>(PSI);
  //return inputValue;
}
